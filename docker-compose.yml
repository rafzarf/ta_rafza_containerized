services:
  # Flask service
  flask:
    build:
      context: ./docker
      dockerfile: Dockerfile
    container_name: flask_app
    ports:
      - "${FLASK_MAIN_PORT}:5000"
      - "${FLASK_PREDICTION_PORT}:5001"
    volumes:
      - ./model_deployment:/app
      - ./sensor_simulator:/sensor_simulator
      - ./machine_learning:/machine_learning  # Added for ML model access
    depends_on:
      influxdb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_started
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - FLASK_MAIN_PORT=${FLASK_MAIN_PORT}
      - FLASK_PREDICTION_PORT=${FLASK_PREDICTION_PORT}
      - PYTHONPATH=/app:/sensor_simulator:/machine_learning  # Updated PYTHONPATH
    restart: unless-stopped

  # Grafana service
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3009:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      influxdb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

  # PostgreSQL service
  postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # InfluxDB service
  influxdb:
    image: influxdb:2.0
    container_name: influxdb
    ports:
      - "${INFLUXDB_PORT}:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=${INFLUXDB_INIT_RETENTION}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Mosquitto MQTT Broker service
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    ports:
      - "${MQTT_PORT}:1883"
      - "${MQTT_WS_PORT}:9001"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
    restart: unless-stopped

  # Node-RED service
  nodered:
    image: nodered/node-red:latest
    container_name: nodered
    ports:
      - "${NODERED_PORT}:1880"
    volumes:
      - nodered_data:/data
    depends_on:
      influxdb:
        condition: service_healthy
      mosquitto:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  influxdb_data:
  grafana_data:
  mosquitto_data:
  mosquitto_log:
  nodered_data: 