services:
  # Dedicated async Flask container
  flask_app:
    build:
      context: ./docker
      dockerfile: Dockerfile
    container_name: flask_app
    ports:
      - "${FLASK_MAIN_PORT}:5000"   # Map Flask app port
    depends_on:
      influxdb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_started
    environment:
      - FLASK_ENV=production
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - FLASK_MAIN_PORT=${FLASK_MAIN_PORT}
      - FLASK_PREDICTION_PORT=${FLASK_PREDICTION_PORT}
      - PYTHONPATH=/app
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"       # Max log file size
        max-file: "3"         # Keep up to 3 log files
    command: python /app/model_deployment/main.py  # Run main.py for Flask

  # General-purpose container for running Python scripts
  message_processor:
    build:
      context: ./docker
      dockerfile: Dockerfile
    container_name: message_processor
    environment:
      - SCRIPT_PATH=${SCRIPT_PATH:-/app/model_deployment/message_processor.py}  # Default script
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_TOPIC=${MQTT_TOPIC}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
      - INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - influxdb
      - postgres
      - mosquitto
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: python $SCRIPT_PATH  # Run the specified script

  influxdb:
    image: influxdb:2.0-alpine
    container_name: influxdb
    ports:
      - "${INFLUXDB_PORT}:8086"
    environment:
      - INFLUXDB_INIT_MODE=setup
      - INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
      - INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
      - INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
      - INFLUXDB_INIT_RETENTION=${INFLUXDB_INIT_RETENTION}  # Added retention policy
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 20s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 20s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    ports:
      - "${MQTT_PORT}:1883"
      - "${MQTT_WS_PORT}:9001"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"  # Grafana default port 3000
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}  # Default Grafana admin user
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}  # Default Grafana password
    depends_on:
      - influxdb  # Wait for InfluxDB to start before Grafana
    volumes:
      - grafana_data:/var/lib/grafana  # Persist Grafana data
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nodered:
    image: nodered/node-red:latest
    container_name: nodered
    ports:
      - "${NODERED_PORT:-1880}:1880"  # Node-RED default port 1880
    environment:
      - MQTT_BROKER=${MQTT_BROKER}  # Pass in MQTT broker information
      - MQTT_PORT=${MQTT_PORT}       # MQTT port for Node-RED to connect
      - INFLUXDB_URL=${INFLUXDB_URL} # InfluxDB URL for potential Node-RED integration
    depends_on:
      - mosquitto  # Node-RED depends on Mosquitto for MQTT
    volumes:
      - nodered_data:/data  # Persist Node-RED flows and data
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


volumes:
  postgres_data:
  influxdb_data:
  mosquitto_data:
  mosquitto_log:
  grafana_data:  
  nodered_data:  

